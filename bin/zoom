#!/usr/bin/env -S cargo +nightly -Z script
use std::{env::args, process::Command};

fn main() {
    let factor = Action::new().get_step();
    zoom(factor);
}

#[derive(Debug)]
enum Action {
    In,
    Out,
    Reset,
}

impl Action {
    fn new() -> Self {
        let action: Option<String> = args().last();
        match action {
            Some(action) if &action == "out" => Self::Out,
            Some(action) if &action == "in" => Self::In,
            _ => Self::Reset,
        }
    }

    fn current_zoom_factor() -> f32 {
        let bytes = Command::new("hyprctl")
            .args(["getoption", "cursor:zoom_factor"])
            .output()
            .unwrap()
            .stdout;
        let binding = String::from_utf8(bytes).unwrap();
        binding
            .lines()
            .next()
            .unwrap()
            .split(':')
            .last()
            .unwrap()
            .trim()
            .parse::<f32>()
            .unwrap()
    }

    fn get_step(self) -> f32 {
        let czf = Self::current_zoom_factor();
        match self {
            Action::In => czf + 0.5,
            Action::Out if czf > 1.0 => czf - 0.5,
            Action::Out | Action::Reset => 1.0,
        }
    }
}

fn zoom(factor: f32) {
    let factor = format!("{factor:.1}");
    Command::new("hyprctl")
        .args(["keyword", "cursor:zoom_factor", factor.as_str()])
        .spawn()
        .unwrap();
}
